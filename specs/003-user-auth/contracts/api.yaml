openapi: 3.0.0
info:
  title: User Authentication API
  description: API endpoints for user registration, login, logout, and password management
  version: 1.0.0
servers:
  - url: https://api.example.com
    description: Production server
  - url: http://localhost:8080
    description: Development server

paths:
  /api/auth/register:
    post:
      summary: Register a new user account
      description: Creates a new user account with email and password. Account is immediately active (no email verification required).
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: User login
      description: Authenticates user credentials and creates a new session. Returns JWT token for authenticated requests.
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials or account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: Account temporarily locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LockoutResponse'

  /api/auth/logout:
    post:
      summary: User logout
      description: Terminates the current user session. Token becomes invalid immediately.
      operationId: logoutUser
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/password/reset:
    post:
      summary: Request password reset
      description: Initiates password reset process. Sends email with reset link (valid for 24 hours).
      operationId: requestPasswordReset
      tags:
        - Password Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Reset link sent to email (always returns success even if email not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/auth/password/reset/verify:
    post:
      summary: Verify reset token and update password
      description: Validates reset token and updates user password. Token is single-use and expires after 24 hours.
      operationId: verifyPasswordReset
      tags:
        - Password Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetVerifyRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/password/update:
    post:
      summary: Update password for authenticated user
      description: Allows logged-in user to change their password. Requires current password for verification.
      operationId: updatePassword
      tags:
        - Password Management
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$'
          example: SecurePass123!
      description: Password must contain uppercase, lowercase, number, and special character

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: SecurePass123!

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: user@example.com

    PasswordResetVerifyRequest:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
          example: abc123xyz789...
        new_password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$'

    PasswordUpdateRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          example: OldPass123!
        new_password:
          type: string
          minLength: 8
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$'

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        user_id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        message:
          type: string
          example: Account created successfully

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        user:
          $ref: '#/components/schemas/UserInfo'
        expires_at:
          type: string
          format: date-time
          example: 2024-12-20T10:30:00Z

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email

    LockoutResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: ACCOUNT_LOCKED
            message:
              type: string
              example: Account temporarily locked due to multiple failed login attempts
            lockout_remaining_minutes:
              type: integer
              example: 8

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Logged out successfully

    PasswordResetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Password reset link sent to email (if account exists)

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid request data
            details:
              type: string

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

